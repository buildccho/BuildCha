// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["driverAdapters"] // これ追加
}
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  level        Int        @default(0)
  score        Int        @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  isAnonymous Boolean?

  userObjects  UserObject[]
  maps         Map[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model Quest {
  id               String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  name             String
  level            Int
  challenge        String?
  score            Int
  difficulty       String // easy | normal | hard

  answerObject     Parts[]
  @@map("quests")

  userObject UserObject[]
}

model UserObject {
  id               String      @id @default(uuid())
  createdAt       DateTime    @default(now())

  userId          String
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  name             String

  mapId           String
  map              Map         @relation(fields: [mapId], references: [id], onDelete: Cascade)

  questId         String
  quest            Quest       @relation(fields: [questId], references: [id])

  position         String // Store as JSON string, e.g. "[1.0,2.0,3.0]"
  rotation         String // Store as JSON string, e.g. "[0.0,0.0,0.0]"
  boundingBox     String // Store as JSON string, e.g. "[1.0,1.0,1.0]"
  objectPrecision Float?

  chatHistory      ChatHistory[]
  parts            Parts[]
  @@map("user_objects")

  @@index([userId])
  @@index([mapId])
  @@index([questId])
}

model Map {
  id          String        @id @default(uuid())
  userId     String
  user        User          @relation(fields: [userId], references: [id],onDelete: Cascade)
  createdAt  DateTime      @default(now())
  name        String
  updateAt  DateTime      @updatedAt

  userObjects UserObject[]
  @@map("maps")

  @@index([userId])
}
//DONE↓
model ChatHistory {
  id              String      @id @default(uuid())
  createdAt      DateTime    @default(now())

  userObjectId  String
  userObject      UserObject  @relation(fields: [userObjectId], references: [id], onDelete: Cascade)

  role            String // User | System
  message         String

  @@index([userObjectId])
}

model Parts {
  id              String      @id @default(uuid())
  createdAt      DateTime    @default(now())

  size            String
  type            String
  color           String
  position        String // Store as JSON string, e.g. "[1.0,2.0,3.0]"
  rotation        String // Store as JSON string, e.g. "[0.0,0.0,0.0]"

  userObjectId  String? // Answer Objectの場合はnull許容
  userObject      UserObject? @relation(fields: [userObjectId], references: [id], onDelete: Cascade)

  quest         Quest[]

  role            String // User | Answer

  @@index([userObjectId])
}